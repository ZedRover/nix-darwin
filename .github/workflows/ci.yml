name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-minimal:
    name: Validate Minimal Configuration
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-darwin-kickstarter
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Check flake syntax
        run: |
          cd minimal
          nix flake check --no-build

      - name: Validate minimal configuration
        run: |
          cd minimal
          nix build .#darwinConfigurations.zeds.system --dry-run

      - name: Check nix formatting
        run: |
          cd minimal
          nix fmt -- --check .

  validate-rich-demo:
    name: Validate Rich Demo Configuration
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-darwin-kickstarter
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Update rich-demo hostname for CI
        run: |
          cd rich-demo
          sed -i '' 's/hostname/ci-test-host/g' flake.nix
          sed -i '' 's/yourusername/ci-test-user/g' flake.nix

      - name: Check flake syntax
        run: |
          cd rich-demo
          nix flake check --no-build

      - name: Validate rich-demo configuration
        run: |
          cd rich-demo
          nix build .#darwinConfigurations.ci-test-host.system --dry-run

      - name: Check nix formatting
        run: |
          cd rich-demo
          nix fmt -- --check .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v25

      - name: Check markdown files
        uses: DavidAnson/markdownlint-action@v1
        with:
          files: '**/*.md'
          config: '.markdownlint.json'

      - name: Check YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: '.github/workflows/'
          config_file: '.yamllint.yml'

  build-success-notification:
    name: Build Success Notification
    runs-on: ubuntu-latest
    needs: [validate-minimal, validate-rich-demo, security-scan, lint-and-format]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Send success notification
        run: |
          echo "ðŸŽ‰ All checks passed! Configuration is ready for deployment."
          echo "::notice title=Build Success::All validation checks passed successfully. Ready for local deployment."

  auto-merge-dependabot:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    needs: [validate-minimal, validate-rich-demo, security-scan, lint-and-format]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}